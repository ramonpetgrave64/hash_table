//
// Created by Ramon Petgrave on 5/21/17.
//

#include "hash_bucket.h"

namespace ramon_petgrave_hashtable {
    template<class Item>
    hash_bucket<Item>::hash_bucket() {
        container = new linked_list<Item>;
        is_ll = true;
    }
    template<class Item>
    hash_bucket<Item>::~hash_bucket() {
        delete container;
    }
    template<class Item>
    size_t hash_bucket<Item>::size() {
        return container->size();
    }
    template<class Item>
    void hash_bucket<Item>::put(int key, const Item& value) {
        assert(container != NULL);
        container->put(key, value);
        if(size() == upper_limit && is_ll) {
            switch_cont_type();
        }
    }
    template<class Item>
    Item& hash_bucket<Item>::get(int key) {
        return container->get(key);
    }
    template<class Item>
    void hash_bucket<Item>::remove(int key) {
        container->remove(key);
        if (size() == lower_limit && !is_ll) {
            switch_cont_type();
        }
    }
    template<class Item>
    void hash_bucket<Item>::switch_cont_type() {
        hash_container<Item>* new_cont;
        if(is_ll) {
            new_cont = new bst<Item>;
        } else {
            new_cont = new linked_list<Item>;
        }
        int key;
        Item* item;
        while(container->size() > 0) {
            key = container->top_key();
            item = &container->get(key);
            new_cont->put(key, *item);
            container->remove(key);
        }
        delete container;
        container = new_cont;
    }
    template<class Item>
    int hash_bucket<Item>::top_key() {
        return container->top_key();
    }
    template<class Item>
    void hash_bucket<Item>::print(std::ostream &os) {
        os << *container;
    }
}